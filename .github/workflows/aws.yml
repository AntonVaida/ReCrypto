# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy Frontend and Backend to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_FRONTEND: "frontend-private"
  ECR_REPOSITORY_BACKEND: "backend-private"
  ECS_CLUSTER: "re-crypto-cluster-5r5ya7"
  ECS_SERVICE_FRONTEND: "frontend-fargate-td-service-49jbca2c"
  ECS_SERVICE_BACKEND: "backend-fargate-td-service-h2qfdntg"
  ECS_TASK_DEF_FRONTEND: "./deployment/frontend-fargate-td.json"
  ECS_TASK_DEF_BACKEND: "./deployment/backend-fargate-td.json"
  CONTAINER_NAME_FRONTEND: "frontend-private"
  CONTAINER_NAME_BACKEND: "backend-private"

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create .env.production for frontend
      run: |
        echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" > ./apps/web/.env.production

    - name: Create .env.production for backend
      run: |
        echo "PORT=${{ secrets.BACKEND_PORT }}" > ./apps/api/.env.production
        echo "FRONTEND_URL=${{ secrets.BACKEND_FRONTEND_URL }}" >> ./apps/api/.env.production

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # ==== FRONTEND ====

    - name: Build, tag, and push Frontend
      id: build-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:${IMAGE_TAG} --load ./apps/web
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:${IMAGE_TAG}
        echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

    - name: Render Frontend Task Definition
      id: render-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEF_FRONTEND }}
        container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
        image: ${{ steps.build-frontend.outputs.image }}

    - name: Deploy Frontend
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-frontend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONTEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    # ==== BACKEND ====

    - name: Build, tag, and push Backend
      id: build-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:${IMAGE_TAG} --load ./apps/api
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:${IMAGE_TAG}
        echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

    - name: Run migrations on production DB
      env:
        NODE_ENV: production
        POSTGRES_HOST: ${{ secrets.PROD_DB_HOST }}
        POSTGRES_PORT: ${{ secrets.PROD_DB_PORT }}
        POSTGRES_USER: ${{ secrets.PROD_DB_USER }}
        POSTGRES_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
        POSTGRES_DB: ${{ secrets.PROD_DB_NAME }}
        AWS_REGION: ${{ env.AWS_REGION }}
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
        docker pull ${{ steps.build-backend.outputs.image }}
        docker run --rm \
          -e NODE_ENV=$NODE_ENV \
          -e POSTGRES_HOST=$POSTGRES_HOST \
          -e POSTGRES_PORT=$POSTGRES_PORT \
          -e POSTGRES_USER=$POSTGRES_USER \
          -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
          -e POSTGRES_DB=$POSTGRES_DB \
          ${{ steps.build-backend.outputs.image }} \
          pnpm migration:run -d src/db/typeorm.config.ts

    - name: Render Backend Task Definition
      id: render-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEF_BACKEND }}
        container-name: ${{ env.CONTAINER_NAME_BACKEND }}
        image: ${{ steps.build-backend.outputs.image }}

    - name: Deploy Backend
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-backend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
