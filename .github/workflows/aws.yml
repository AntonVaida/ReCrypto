name: Deploy Frontend and Backend to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY_FRONTEND: "frontend-private"
  ECR_REPOSITORY_BACKEND: "backend-private"
  ECS_CLUSTER: "re-crypto-cluster-5r5ya7"
  ECS_SERVICE_FRONTEND: "frontend-fargate-td-service-49jbca2c"
  ECS_SERVICE_BACKEND: "backend-fargate-td-service-jm173j0g"
  ECS_TASK_DEF_FRONTEND: ".aws/frontend-fargate-td-revision1.json"
  ECS_TASK_DEF_BACKEND: ".aws/backend-fargate-td-revision2.json"
  CONTAINER_NAME_FRONTEND: "frontend-private"
  CONTAINER_NAME_BACKEND: "backend-private"

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # ==== FRONTEND ====

    - name: Build, tag, and push Frontend
      id: build-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:${IMAGE_TAG} --load ./apps/web
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:${IMAGE_TAG}
        echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

    - name: Render Frontend Task Definition
      id: render-frontend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEF_FRONTEND }}
        container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
        image: ${{ steps.build-frontend.outputs.image }}

    - name: Deploy Frontend
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-frontend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_FRONTEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    # ==== BACKEND ====

    - name: Build, tag, and push Backend
      id: build-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker buildx build --platform linux/amd64 -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:${IMAGE_TAG} --load ./apps/api
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:${IMAGE_TAG}
        echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

    - name: Render Backend Task Definition
      id: render-backend
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEF_BACKEND }}
        container-name: ${{ env.CONTAINER_NAME_BACKEND }}
        image: ${{ steps.build-backend.outputs.image }}

    - name: Deploy Backend
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-backend.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_BACKEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
